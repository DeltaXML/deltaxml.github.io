<!DOCTYPE html>
<html lang="en">
	<div class="main">
		
		<div class="two-thirds column">
			<p>Visual Studio Code's Tasks include custom task types for configuring and running Saxon (Java)
				or Saxon-JS (JavaScript) XSLT transforms. The Saxon XSLT processor is called via its command-line interface
				from the <a href="https://code.visualstudio.com/docs/editor/integrated-terminal">Integrated Terminal</a>
				in Visual Studio code.
				Task configurations effectively control command-line arguments for the XSLT Processor. An attempt is made to parse any error messages
				returned from Saxon, so that the position of any Saxon-reported errors in the XSLT can be highlighted.
			</p>
			
			<p>XSLT transforms are run using custom <code>xslt</code> or <code>xslt-js</code>
				<a href="https://code.visualstudio.com/Docs/editor/tasks">Visual Studio Code Tasks</a>
				for Saxon (requires <a href="https://adoptopenjdk.net/installation.html">Java</a> and 
				<a href="https://sourceforge.net/projects/saxon/files/Saxon-HE/10/Java/">Saxon</a> installation) 
				or Saxon-JS (requires <a href="https://nodejs.org/en/">NodeJS</a> installation) respectively.</p>
			<h3>Saxon (Java) setup</h3>
			<ol>
				<li><p>
						Ensure that you have a <a href="https://code.visualstudio.com/docs/editor/workspaces">workspace folder</a>
						open in Visual Studio Code (use <strong>File > open...</strong> from the menu).
						The configuration will be saved in a <code>tasks.json</code> file in this workspace folder.
					</p></li>
				<li>
					<p>If Java is not already installed, Java 1.8 or later can be downloaded and installed from <a href="https://adoptopenjdk.net/installation.html">here</a></p>
				</li>
				<li>
					<p>If Saxon is not already installed, Saxon-HE can be downloaded and installed from <a href="https://sourceforge.net/projects/saxon/files/Saxon-HE/10/Java/">here</a></p>
				</li>
				<li>
					<p>Saxon (Java) tasks need the path to the installed Saxon jar file to be included in a property in your Visual Studio Code settings. 
						Invoke <code>Preferences: Open User Settings</code> from the Command Palette (<span class="shortcut">⇧⌘P</span>) and type
						<code>xslt</code> to show a short-list of settings:</p>
					<img src="resources/tasks/settings.png" class="scale-with-grid" />
				</li>
				<li>
					<p>Enter the Jar file path in the <strong>Tasks: Saxon Jar</strong> property (see above)</p>
				</li>
			</ol>
			<h3>Saxon-JS setup</h3>
			<ol>
				<li><p>
						Ensure that you have a <a href="https://code.visualstudio.com/docs/editor/workspaces">workspace folder</a>
						open in Visual Studio Code (use <strong>File > open...</strong> from the menu).
						The configuration will be saved in a <code>tasks.json</code> file in this workspace folder.
					</p></li>
				<li>
					<p>If NodeJS is not already installed, it can be downloaded and installed from <a href="https://nodejs.org/en/download/">here</a></p>
				</li>
				<li>
					<p>Initialize <a href="https://docs.npmjs.com/about-npm">NPM</a> 
						in the current folder and then install the Saxon-JS package (xslt3) by running the following commands in the Visual Studio Code terminal (<span class="shortcut">⌘J</span>):
						<code class="block">npm init -y
npm install --save-dev xslt3</code>	
					</p>
				</li>
			</ol>
			<aside>The Saxon-JS task uses <a href="https://docs.npmjs.com/cli/v7/commands/npx">NPX</a> to invoke Saxon-JS task. 
				NPX will download the Saxon-JS package if you choose not to follow the previous step and it can't find the Saxon-JS package in your global space.</aside>
			<h3>To configure the initial task:</h3>
			<ol>
				<li><p>
						Invoke <code>Tasks: Run Build Task</code> from the Command Palette (<span class="shortcut">⇧⌘B</span>):
					</p>						
					<img src="resources/tasks/run-task.png" class="scale-with-grid" />
				</li>
				<li><p>
						Press <span class="shortcut">Enter</span> to <strong>Configure Build Task</strong>:
					</p>					
					<img src="resources/tasks/select-task.png" class="scale-with-grid" />
				</li>
				<li><p>
						Select from the list (shown above) the task type you require (you may see more task types in the list), for either Saxon or Saxon-JS.
					</p>
					<img src="resources/tasks/edit-task.png" class="scale-with-grid" />
				</li>
				<li>
					<p>
						The <code>tasks.json</code> file will then be opened with a template task added for the task type specified. 
						The task shown above is for the Saxon task. Edit this task to fit your XSLT transform requirement.
						It's a good idea to change the <code>label</code> property (the value shown in the tasks list) to describe your XSLT transform.
						Auto-completion with hints is available as you type. 
						The actual file type is 'JSON with Comments' so you can add comments and leave trailing commas etc.
					</p>
				</li>
				<li>
					<p>
						You can create any number of tasks for different XSLT transform scenarios. Note that the <code>group.isDefault</code>
						property controls that task that is automatically launched when you next invoke 
						<code>Run Build Task</code> from the Command Palette or when using <span class="shortcut">⇧⌘B</span>.
					</p>
				</li>
				<li>
					<pi>Save any changes to the <code>tasks.json</code> file <span class="shortcut">⌘S</span></pi>
				</li>
				<li>
					<p>Run the newly configured XSLT transform by invoking <code>Run Build Task</code> from the Command Palette or when using <span class="shortcut">⇧⌘B</span>.</p>
				</li>
			</ol>
			<h3 id="references">Variable References in Tasks</h3>
			<p>Visual Studio Code supports variable substitutions for Task configuration files.
				Variable substitution uses the <code>${variableName}</code> syntax. Commands that
				return a string can be invoked via variable substitution, the boiler plate XSLT Task uses <code>${command:xslt-xpath.pickXsltFile}'</code> and <code>${command:xslt-xpath.pickResultFile}'</code>
				variable references.
			</p>
			<h4>User-input for file-selection within a Task</h4>
			<p>
				A set of 'Pick File' commands suitable for XSLT tasks is available to allow user-selected file paths to be used within an XSLT task. An example is shown below:</p>
			<p><img src="resources/newest-pickFiles.png" class="scale-with-grid" /></p>
			<p>
			Each command prompts the user to select a file. This is from: the current file, a 'recent files' list for that commmand (optionally from a specified 'previous stage' command),
			or from a 'Open File' or 'Save File' VS Code dialog as appropriate. The available commands are listed below:	
			</p>
			<table>
				<thead>
					<tr>
						<th>Command</th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>xslt-xpath.pickFile</td>
						<td>General file selection with arguments to provide custom behaviour.
							This must be invoked with arguments that are supplied in the 'inputs'
							property of the tasks.json file. Invoked by ${input:&lt;input-id&gt;}
						</td>
					</tr>
					<tr>
						<td>xslt-xpath.pickXsltFile</td>
						<td>Returns a user-selected XSLT file</td>
					</tr>
					<tr>
						<td>xslt-xpath.pickXmlSourceFile</td>
						<td>Returns a user-selected XML Source file</td>
					</tr>
					<tr>
						<td>xslt-xpath.pickStage2XmlSourceFile</td>
						<td>Returns a user-selected Stage2 XML source file</td>
					</tr>
					<tr>
						<td>xslt-xpath.pickResultFile</td>
						<td>Returns a user-selected result file</td>
					</tr>
					<tr>
						<td>xslt-xpath.pickStage2ResultFile</td>
						<td>Returns a user-selected result file for Stage2</td>
					</tr>
				</tbody>
			</table>
			<p>A full list of variable references is given in Visual Studio Code's
				<a href="https://code.visualstudio.com/docs/editor/variables-reference">Variables Reference</a></p>
			<h4>The 'pickFile' command</h4>
			<p>The general purpose command 'xslt-xpath.pickFile' is the base commands for specific 'pick file' commands like 'pickXsltFile'.
			After a task is invoked, the user is prompted to select a file for opening or saving. A Pick List is shown with options to select files in up to 4 ways:
				<ul>
					<li>the current file (if it's extension is compatible with the extensions list)</li>
					<li>from recently used (current stage) files - from list for the current label e.g. 'Select XSLT File'</li>
					<li>from recently used (previous stage result) files - shows result files from a previous task</li>
					<li>from an 'Open File' or 'Save File' dialog</li>
				</ul>
			</p>
			<p>The 'recently used' file data is maintained per workspace and is restored when VS Code is closed and reopened. A 'clear recently used' option
				is also listed when there are files already in the list. 
			</p>
			<p>The 'pickList' command must be invoked as an 'input' property of a task as it requires an 'options' argument. A sample 'inputs' property
			can be added to the 'tasks.json' file with the <code>XSLT: add Inputs to Task file</code> command.</p>
				<p>The 'pickFile' commands 'options' object have the following properties:
				<ul>
					<li>label - the prompt message for the user, also the identifier for the 'recently' used list</li>
					<li>extensions? - an array of filter file-extensions (when set, a '*' option can also be selected from the dialog)</li>
					<li>isResult? - causes the 'Save File' dialog to be shown when set true</li>
					<li>prevStageLabel? - shows the recently used files for the specified label</li>
					<li>previousStageGroup? - the group-name for the 'previous stage' files - default: 'recent filesfrom previous stage'</li>
				</ul>
				<strong>A sample inputs property using the 'pickFile' command is shown below:</strong>
			</p>
			<code class="block">
"inputs": [
/*
1. the specialist 'pickFile' command equivalents for the inputs defined here are:
	"xsltFile": "${command:xslt-xpath.pickXsltFile}",              // can select from current file - if xslt - or recently used xslt files
	"xmlSource": "${command:xslt-xpath.pickXmlSourceFile}",        // can select from current file or recently used stage1 source files
	"xmlSource": "${command:xslt-xpath.pickStage2XmlSourceFile}",  // can select from recently used stage2 source files or stage1 result files
	"resultPath": "${command:xslt-xpath.pickResultFile}",          // can save to recently used stage1 result files
	"resultPath": "${command:xslt-xpath.pickStage2ResultFile}",    // can save to recently used stage2 result files

2. these inputs invoke the 'pickFile' command with args for custom behaviour:
*/
{
	/* --- Usage: ---
	"xmlSource": "${input:xmlFile}",
	*/
	"id": "xmlFile",
	"type": "command",
	"command": "xslt-xpath.pickFile",
	"args": {"label": "Select XML File", "extensions": ["xml", "xhtml", "svg"] }
},
{
	/* --- Usage: ---
	"xmlSource": "${input:xmlFile2}",
	*/
	"id": "xmlFile2",
	"type": "command",
	"command": "xslt-xpath.pickFile",
	"args": {"label": "Select Stage1 XML File", "extensions": ["xml", "xhtml", "svg"], "prevStageLabel": "Select Result File", "prevStageGroup": "recent files from previous stage" }
},
{
	/* --- Usage: ---
	"xsltFile": "${input:xsltFile}",
	*/
	"id": "xsltFile",
	"type": "command",
	"command": "xslt-xpath.pickFile",
	"args": {"label": "Select XSLT Stylesheet", "extensions": ["xsl", "xslt"] }
},
{
	/* --- Usage: ---
	"resultPath": "${input:resultFile}",
	*/
	"id": "resultFile",
	"type": "command",
	"command": "xslt-xpath.pickFile",
	"args": {"label": "Select Result File", "isResult": true }
}
]
				</code>
			<h3>Configuring more tasks</h3>
			<p>To create more tasks, just invoke <code>Tasks: Run Build Task</code> from the Command Palette 
				and choose the task type you need. Provided you've changed the <code>label</code> property from the template
				task for that type, a new task will created from the template task.
			</p>
			<p>Visual Studio Tasks are very flexible. You can combine XSLT tasks with other task types, for example, to run a shell command.
				The <code>dependsOn</code> task property is used to chain tasks together. The <strong>Compound Tasks</strong>
				section of the Visual Studio Code <a href="https://code.visualstudio.com/Docs/editor/tasks">Tasks documentation</a>
				covers this concept in more detail.				
			</p>
			<h3>The Visual Studio Code terminal</h3>
			<p>When you start a Task, it is run in a <em>Task</em> tab in Visual Studio Code's <a href="https://code.visualstudio.com/docs/editor/integrated-terminal">Integrated Terminal</a>,
				the Pane hosting the Terminal view is toggle with <span class="shortcut">⌘J</span>. 
				The tab label reflects the Task configuration <code>label</code> property. 
				When a Saxon XSLT task is run, <code>xsl:message</code> output and any Saxon errors will be shown in the terminal window.
			</p>
			<img src="resources/tasks/vscode-terminal.png" class="scale-with-grid" />

		</div>
		
	</div>	
</html>