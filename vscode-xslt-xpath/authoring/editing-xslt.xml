<!DOCTYPE html>
<html lang="en">
	<div class="main">
		
		<div class="two-thirds column">
			<p>With <a href="https://marketplace.visualstudio.com/items?itemName=deltaxml.xslt-xpath">DeltaXML's XSLT/XPath extension</a>
				, Visual Studio Code is now a fully featured
				XSLT 3.0 editor. Standalone XPath 3.1 files are also fully supported. Visual Studio Code's rich ecosystem
				is now available to XSLT and XPath developers.</p>
			
			<p>Comprehensive, but language-neutral, descriptions of Visual Studio Code can be found in Microsoft's 
				<a href="https://code.visualstudio.com/docs/editor/codebasics"> Visual Studio Code User Guide. Links to key sections are below:</a></p>
			<ul>
				<li><a href="https://code.visualstudio.com/docs/editor/codebasics#_keyboard-shortcuts">Keyboard shortcuts</a></li>
				<li><a href="https://code.visualstudio.com/docs/editor/codebasics#_multiple-selections-multicursor">Multiple selections (multi-cursor)</a></li>
				<li><a href="https://code.visualstudio.com/docs/editor/codebasics#_column-box-selection">Column (box) selection</a></li>
				<li><a href="https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save">Save / Auto Save</a></li>
				<li><a href="https://code.visualstudio.com/docs/editor/codebasics#_hot-exit">Hot Exit</a></li>
				<li><a href="https://code.visualstudio.com/docs/editor/codebasics#_find-and-replace">Find and Replace</a></li>
				<li><a href="https://code.visualstudio.com/docs/editor/codebasics#_search-across-files">Search across files</a></li>
				<li><a href="https://code.visualstudio.com/docs/editor/codebasics#_file-encoding-support">File encoding support</a></li>
				<li><a href="https://code.visualstudio.com/docs/editor/emmet">Emmet (snippet abbreviations)</a></li>
			</ul>
			<p>The documentation here focuses on XSLT and XPath language features. More general XML features are
				covered on the <a href="editing.html">Editing XML</a> page. 
				Help on navigating code in the editor is provided in the <a href="navigation.html">Code Navigation</a> page.</p>
			<h3 id="highlighting">Syntax Highlighting</h3>
			
			<p class="caption"><em>Eva Dark Theme</em></p>
			<img src="resources/dark-eva.png" class="scale-with-grid"/>		
			
			<p>For improved performance and precision, this extension eschews the default 
				but <a href="https://github.com/microsoft/vscode/issues/77140">problematic TM Grammar</a>
				and instead uses Visual Studio Code's
				<a href="https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide">Semantic Highlighting</a> introduced in 2020.
				feature. For external <a href="https://code.visualstudio.com/docs/getstarted/themes">color themes</a> you should explicitly enable Semantic Highlighting. See
				the <a href="settings.html">Settings</a> page for more information.
			</p>
			
			<p class="caption"><em>Github Light Theme</em></p>		
			<img src="resources/light-github.png" class="scale-with-grid" style="border-style: solid; border-width: 1px"/>
			
			<p>The extension provides syntax highlighting for XSLT instructions, XML Literal Result Elements, XML attributes, XML character references, CDATA sections 
				and all tokens within XPath expressions. XPath expressions within Attribute Value Templates (AVTs) and 
				Text Value Templates are syntax highlighted also.</p>
		</div>
		<h3 id="formatting">Formatting</h3>
		<p>Two commands are provided for formatting XML, XSLT or XPath expressions:</p>
		<ul>
			<li><strong>Format Document</strong> <span class="shortcut">(⇧⌥F)</span> - Format the entire active file.</li>
			<li><strong>Format Selection</strong> <span class="shortcut">(⌘K ⌘F)</span> - Format the selected content.</li>
			<li><strong>Format on Save</strong> - Optionally specify to format only modifications.</li>
		</ul>
		<p>As well as explicitly invoking commands, formatting can be triggered as you type, 
			when you save a file, or when you paste content from the clipboard. The following settings control this:</p>
		<ul>
			<li><code>editor.formatOnType</code> - Controls indentation for new lines.</li>
			<li><code>editor.formatOnSave</code> - Controls indentation for new lines.</li>
			<li><code>editor.formatOnPaste</code> - Controls indentation for new lines.</li>
			<li><code>editor.editor.formatOnSaveMode</code> - <em>modifications</em> setting, only formats code changes on save.</li>
		</ul>
		<p>The XPath formatter indents code blocks within <code>{}</code>, <code>[]</code> and <code>()</code> bracket-pairs.
			Indentation is also adjusted for <code>if/else</code> blocks and range-variable blocks.	
		</p>
		<h3>Folding</h3>
		<p>
			Folding with this extension uses indentation to determine fold regions.
			To set a region code-folding block, surround it with <code>&lt;?region?></code> and <code>&lt;?endregion?></code> processing instructions.
			You may optionally include a label for the processing instructions, for example:
		</p>
		<code class="block"><![CDATA[<?region modeA?>
...
<?endregion modeA?>]]></code>
		<p>For more detail and a full list of Folding-related actions see the
			<a href="https://code.visualstudio.com/docs/editor/codebasics#_folding">Folding</a> section in Visual Studio Code's User Guide.</p>
		<h3 id="intellisense">Intellisense (Auto Complete)</h3>
		<p>Intellisense suggestions include all in-scope XSLT and XPath symbols from <code>xsl:accumulator</code> names
			to <code>xsl:variable</code> names, to anonymous XPath function parameters. There is intellisense
			also for XSLT and XPath functions - help for built-in functions is shown alongside the suggestions list. Symbols from
			included/imported files are included in the suggestions list.</p>
		<p>For XSLT intellisense, the <span class="shortcut">&lt;</span> character triggers suggestions. XSLT instruction suggestions
			fit the context of the curstor location. 
			On accepting a suggestion a <a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">Code Snippet</a> is inserted
			which will include common attributes for the selected instruction.
		</p>
		<p>Intellisense is manually triggered with <span class="shortcut">⌃Space</span>, with <span class="shortcut">Tab</span> or 
			<span class="shortcut">Enter</span> used to accept suggestions. These <a href="">key bindings</a> are fully customizable.</p>
		<h5>XSLT Instruction Snippets</h5>
		<p>The special <code>xsl:stylesheet</code> suggestion includes a boiler plate 'identity transform' stylesheet complete with namespace
			declarations.</p>
		<p>The <code>xsl:message</code> suggestions include a <em>Watch Variables</em> snippet that lists the names and values of all
			the immediate in-scope variables or parameters.</p>
		<h5>More Snippets</h5>
		<p>
			You can define your own snippets in Visual Studio Code in a declarative way, without writing an extension. See the Visual Studio Code
			documentation:
			<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets">Create your own snippets</a>.
		</p>
		<p><strong>Emmet Snippets</strong> provide a useful shorthand for inserting literal result elements. They can be enabled for XSLT
			in <a href="settings.html">Visual Studio Code Settings</a>.	
		</p>
		<h3>Bracket Matching</h3>
		<p>Matching brackets in XPath expressions are highlighted when the cursor is near one of them. You can jump to the matching
			bracket with <span class="shortcut">⇧⌘\</span></p>
		

		<h3 id="renaming">Symbol Renaming</h3>

		<p>
			There's currently no explicit language support for Visual Studio Code's Symbol Renaming feature. A good substitute, however,
			is the multi-select feature for the selected name <span class="shortcut">⇧⌘L</span> . All other occurrences of the selected 
			name are editing simultaneously. Pressing <span class="shortcut">Escape</span> quits the multi-select mode.
		</p>
		<h3 id="checking">Code Checking</h3>
		<aside>Note: Code Checking uses a Symbol Provider, to ensure checks are performed you should keep the
			<a href="https://code.visualstudio.com/Docs/editor/editingevolved#_breadcrumbs">Breadcrumbs</a> view enabled.</aside>
		<p>
			The XSLT/XPath extension performs a comprehensive set of checks on your code as you type. Any syntax warning or error problems are highlighted with a squiggly
			underline for the token in question. Reference checks attempt to resolve symbol names through all imported/include stylesheets and packages. 
			Here is a summary of the key checks:
		</p>
		<ol>
			<li>XML Syntax</li>
			<li>XSLT/XPath Variable name references</li>
			<li>XSLT/XPath Parameter name references</li>
			<li><strong>All</strong> other symbol name refererences</li>
			<li>Function name and arity (number of params)</li>
			<li><code>xsl:with-param</code> names</li>
			<li>File locations in <code>xsl:import xsl:include xsl:use-package</code></li>
			<li>Order of operators/operands in XPath</li>
			<li>Matching of brackets in XPath</li>
			<li>XSLT instructions and their attributes</li>
			<li>Duplicate global symbol names</li>
			<li>Attribute Value Template Syntax</li>
			<li>Text Value Template Syntax</li>			
		</ol>
		<h5>'Non-Standalone' Stylesheets</h5>
		<p>Non-standalone XSLT stylesheet modules have missing imports because they are imported by a parent module
			that declares the required imports. If no knowledge of the parent module is available, spurious problems
			can be reported. In such cases, the spurious problems are annoying and may obscure reported problems that are actually relevant.
		</p>
		<p>A search is made to find if the active XSLT stylesheet has been declared as an import by another stylesheet opened recently
			in Visual Studio Code. If such a 'parent' stylesheet is found it is imported along with any other imports. Functions and,
			variables etc. used in the active stylehseet can therefore be resolved.
		</p>
		<h5>Unused Variables</h5>
		<p>The Code Checker detects unused variables and parameters declared in either XSLT or XPath expressions. These are highlighted by being 'grayed out' in
			the editor. Global variables are shown as unused if they are not referenced in the current file, the 'unused' state is not affected by
			imported stylesheets thay may reference the same variable.
		</p>
		<h5>Compile-time and Run-time problems</h5>
		<p>The Code Checking feature is designed to find most basic code problems due to typos or changes to referenced symbols.
			When XSLT is run, an attempt is made to parse error messages from the Saxon XSLT procesor 
			(shown in the Task tab of the Terminal View) so that the problem token is highlighted,
			and the error message is shown in the Problems View.	
		</p>

		<aside>
			<p>Advantages of using the native code-checker to supplement compile-time error detection:</p>
			<ul>
				<li>Improved response times (lower CPU usage) as you type</li>
				<li>Improved precision on error location</li>
				<li>Improved potential to report multiple errors</li>
				<li>Provides warnings on unused variable references etc.</li>
			</ul>		
		</aside>

		<p>You can quickly create a new XSLT file when adding a <code>xsl:import</code>, <code>xsl:use-package</code> or <code>xsl:include</code> XSLT instruction. Simply enter the file path
			in the href, press <span class="shortcut">⌘+click</span> and then, in the 'Unable to Open...' dialog press the <strong>Create File</strong> button.</p>
		
		<aside>Note that for the XSLT <code>xsl:use-package</code> instruction, you first need to map the URI to a file path as the User or WorkSpace Setting:
			<strong>XSLT.resources.xsltPackage</strong></aside>
	</div>
</html>